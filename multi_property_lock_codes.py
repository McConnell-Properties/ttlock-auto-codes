import time, json

DEBUG = True  # set False after it works

def create_lock_code_simple(lock_id, code, name, start, end, code_type="Room", booking_id=""):
    url = "https://euapi.ttlock.com/v3/keyboardPwd/add"
    payload = {
        "clientId": CLIENT_ID,
        "accessToken": ACCESS_TOKEN,
        "lockId": lock_id,
        "keyboardPwd": code,
        "keyboardPwdName": f"{name} - {code_type} - {booking_id}",
        "keyboardPwdType": 3,                  # period password
        "startDate": int(start.timestamp()*1000),
        "endDate":   int(end.timestamp()*1000),
        "addType": 2,                          # generated by app/cloud
        "date": int(time.time()*1000)
    }

    # sanity check
    if payload["endDate"] <= payload["startDate"]:
        print(f"❌ Bad time window for {name}: start >= end")
        return False

    if DEBUG:
        print("➡️ TTLock request (without secrets):",
              json.dumps({k:v for k,v in payload.items() if k not in ["clientId","accessToken"]}, ensure_ascii=False))

    try:
        r = requests.post(url, data=payload, timeout=30)
        print(f"⬅️ TTLock HTTP {r.status_code}")
        try:
            data = r.json()
            print("⬅️ TTLock body:", data)
        except Exception:
            print("⬅️ TTLock raw:", r.text[:400])
            return False
    except requests.exceptions.Timeout:
        print("❌ TTLock API timeout")
        return False
    except Exception as e:
        print("❌ TTLock request failed:", e)
        return False

    # Success
    if data.get("errcode") == 0:
        print(f"✅ Code {code} created on lock {lock_id}")
        return True
    # Duplicate code already exists (usually OK)
    if data.get("errcode") == -3007:
        print(f"⚠️ Code {code} already exists on lock {lock_id} (treating as success)")
        return True

    # Anything else is a hard failure with message from TTLock
    print(f"❌ TTLock error {data.get('errcode')}: {data.get('errmsg')}")
    return False
